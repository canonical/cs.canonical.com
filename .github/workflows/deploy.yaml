name: Deploy

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to deploy (e.g., v1.0.0)"
        required: true
        type: string
  workflow_call:
    inputs:
      release_tag:
        description: "Release tag to deploy (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TAG: ${{ steps.set-vars.outputs.RELEASE_TAG }}
      IMAGE_URL: ${{ steps.set-vars.outputs.IMAGE_URL }}
    steps:
      - id: set-vars
        run: |
          echo "RELEASE_TAG=${{ inputs.release_tag || github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=ghcr.io/${{ github.repository }}:${{ inputs.release_tag || github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT

  validate:
    runs-on: ubuntu-latest
    needs: setup
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Validate Release Tag
        run: |
          echo "Validating release tag: ${{ needs.setup.outputs.RELEASE_TAG }}"

          # Check if the release exists
          if ! gh release view ${{ needs.setup.outputs.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "Error: Release with tag '${{ needs.setup.outputs.RELEASE_TAG }}' does not exist."
            echo "Available releases:"
            gh release list --limit 10
            echo "## ❌ Release Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Release Tag:** ${{ needs.setup.outputs.RELEASE_TAG }} (not found)" >> $GITHUB_STEP_SUMMARY
            echo "**Available Releases:** Check the workflow logs for available tags" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "✓ Release '${{ needs.setup.outputs.RELEASE_TAG }}' exists and is valid"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Release Validation" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** ${{ needs.setup.outputs.RELEASE_TAG }}" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    needs: [setup, validate]
    runs-on: [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo snap install juju --channel=3.4/stable --classic
          sudo snap install vault --classic

      - name: Download Release Artifacts
        run: |
          echo "Downloading release assets for tag: ${{ needs.setup.outputs.RELEASE_TAG }}"

          # Download the charm file from the release
          gh release download ${{ needs.setup.outputs.RELEASE_TAG }} --pattern "*.charm" --dir ./

          # Verify the files were downloaded
          if [ ! -f *.charm ]; then
            echo "Error: Charm file not found in release ${{ needs.setup.outputs.RELEASE_TAG }}"
            echo "## ❌ Asset Download Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Issue:** Charm file not found in release ${{ needs.setup.outputs.RELEASE_TAG }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          CHARM_FILE=$(ls *.charm)
          echo "Successfully downloaded charm: $CHARM_FILE"
          echo "## 📦 Release Assets Downloaded" >> $GITHUB_STEP_SUMMARY
          echo "**Charm:** $CHARM_FILE" >> $GITHUB_STEP_SUMMARY

      - name: Configure Vault and Juju
        run: |
          export VAULT_ADDR=https://vault.admin.canonical.com:8200
          export TF_VAR_login_approle_role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }}
          export TF_VAR_login_approle_secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }}
          export VAULT_SECRET_PATH_ROLE=secret/prodstack6/roles/stg-cs-canonical-com
          export VAULT_SECRET_PATH_COMMON=secret/prodstack6/juju/common
          VAULT_TOKEN=$(vault write -f -field=token auth/approle/login role_id=${TF_VAR_login_approle_role_id} secret_id=${TF_VAR_login_approle_secret_id}) 
          export VAULT_TOKEN
          mkdir -p ~/.local/share/juju
          vault read -field=controller_config "${VAULT_SECRET_PATH_COMMON}/controllers/juju-controller-36-staging-ps6" | base64 -d > ~/.local/share/juju/controllers.yaml
          USERNAME=$(vault read -field=username "${VAULT_SECRET_PATH_ROLE}/juju")
          PASSWORD=$(vault read -field=password "${VAULT_SECRET_PATH_ROLE}/juju")
          printf "controllers:\n  juju-controller-36-staging-ps6:\n    user: %s\n    password: %s\n" "$USERNAME" "$PASSWORD" > ~/.local/share/juju/accounts.yaml

      - name: Deploy Application to staging
        run: |
          export JUJU_MODEL=admin/stg-cs-canonical-com
          if juju status --relations | grep -q "^cs-canonical-com"; then
            echo "Application 'cs-canonical-com' exists. Running juju refresh..."
            juju refresh cs-canonical-com --path ./*.charm --resource flask-app-image=${{ needs.setup.outputs.IMAGE_URL }}
          else
            echo "Application 'cs-canonical-com' not found. Running juju deploy..."
            juju deploy ./*.charm cs-canonical-com --resource flask-app-image=${{ needs.setup.outputs.IMAGE_URL }}
          fi
          juju wait-for application cs-canonical-com --query='name=="cs-canonical-com" && (status=="active" || status=="idle")'

  deploy-production:
    name: Deploy to production
    needs: [setup, validate]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: false
    runs-on: [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo snap install juju --channel=3.6/stable --classic
          sudo snap install vault --classic

      - name: Download Release Artifacts
        run: |
          echo "Downloading release assets for tag: ${{ needs.setup.outputs.RELEASE_TAG }}"

          # Download the charm file from the release
          gh release download ${{ needs.setup.outputs.RELEASE_TAG }} --pattern "*.charm" --dir ./

          # Verify the files were downloaded
          if [ ! -f *.charm ]; then
            echo "Error: Charm file not found in release ${{ needs.setup.outputs.RELEASE_TAG }}"
            echo "## ❌ Asset Download Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Issue:** Charm file not found in release ${{ needs.setup.outputs.RELEASE_TAG }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          CHARM_FILE=$(ls *.charm)
          echo "Successfully downloaded charm: $CHARM_FILE"
          echo "## 📦 Release Assets Downloaded" >> $GITHUB_STEP_SUMMARY
          echo "**Charm:** $CHARM_FILE" >> $GITHUB_STEP_SUMMARY

      - name: Configure Vault and Juju
        run: |
          export VAULT_ADDR=https://vault.admin.canonical.com:8200
          export TF_VAR_login_approle_role_id=${{ secrets.PROD_VAULT_APPROLE_ROLE_ID }}
          export TF_VAR_login_approle_secret_id=${{ secrets.PROD_VAULT_APPROLE_SECRET_ID }}
          export VAULT_SECRET_PATH_ROLE=secret/prodstack6/roles/prod-cs-canonical-com
          export VAULT_SECRET_PATH_COMMON=secret/prodstack6/juju/common
          VAULT_TOKEN=$(vault write -f -field=token auth/approle/login role_id=${TF_VAR_login_approle_role_id} secret_id=${TF_VAR_login_approle_secret_id}) 
          export VAULT_TOKEN
          mkdir -p ~/.local/share/juju
          vault read -field=controller_config "${VAULT_SECRET_PATH_COMMON}/controllers/juju-controller-36-production-ps6" | base64 -d > ~/.local/share/juju/controllers.yaml
          USERNAME=$(vault read -field=username "${VAULT_SECRET_PATH_ROLE}/juju")
          PASSWORD=$(vault read -field=password "${VAULT_SECRET_PATH_ROLE}/juju")
          printf "controllers:\n  juju-controller-36-production-ps6:\n    user: %s\n    password: %s\n" "$USERNAME" "$PASSWORD" > ~/.local/share/juju/accounts.yaml

      - name: Deploy Application to production
        run: |
          export JUJU_MODEL=admin/prod-cs-canonical-com
          if juju status --relations | grep -q "^cs-canonical-com"; then
            echo "Application 'cs-canonical-com' exists. Running juju refresh..."
            juju refresh cs-canonical-com --path ./*.charm --resource flask-app-image=${{ needs.setup.outputs.IMAGE_URL }}
          else
            echo "Application 'cs-canonical-com' not found. Running juju deploy..."
            juju deploy ./*.charm cs-canonical-com --resource flask-app-image=${{ needs.setup.outputs.IMAGE_URL }}
          fi
          juju wait-for application cs-canonical-com --query='name=="cs-canonical-com" && (status=="active" || status=="idle")'
